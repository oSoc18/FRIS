<!-- views/pages/index.ejs -->

<!DOCTYPE html>
<html lang="en">

<head>
    <% include ../partials/head %>
</head>

<body id="body">

    <% include ../partials/header %>

        <p id="textBox"></p>

        <div class="svgContainer">
            <div class="controlPanel">
                <div id="homeButton" class="buttonHome">
                    <img src="../css/img/refresh-page-option.svg" class="buttonImage1">
                </div>
                <div id="upButton" class="buttonBack">
                    <img src="../css/img/leftArrow.jpg" class="buttonImage2">
                </div>
            </div>
        </div>

        </div>
        </div>
        <div id="loading" class="loading"></div>
        </div>
        <p id="textBox"></p>
        <script type="text/javascript">
            d3.select(".loading").style("visibility", "visible");
            var dataFile;
            var dataPath;
            var datas = [];

            var tooltip = d3.select("body").append("div")
                .attr("class", "tooltip")
                .style("position", "absolute")
                .style("z-index", "10")
                .style("opacity", 0);

            var object;
            var array_datas = [];
            $(function () {
                var uuid = getUrlParameter('uuid');
                var quickSearch = getUrlParameter('keyword');
                $.getJSON("http://"+href()+":5000/organisation/" + uuid + "/output_cluster", function (data) {
                    data.children.forEach(elt => {
                        array_datas.push(elt);
                    });
                    $('#content').append("<a class='breadcrumb-item  white menu-item ' href='/keyword" +
                        quickSearch + "'> Search</a> / "); // show the name in the search bar
                    $('#content').append(" <a class='breadcrumb-item  white menu-item '  href='#'> " +
                        data.name ? data.name : 'Unknown' + "</a>"); // show the name in the search bar
                    init(data);

                });
            });


            function findPublications(name) {

                for (var i = 0; i < array_datas.length; i++) {
                    l(i + ". " + array_datas[i].name);
                    if (array_datas[i].name == name.num) {
                        return array_datas[i];
                    }
                }

            }

            function init(items) {
                d3.select(".loading").style("visibility", "visible");
                var tooltip = d3.select("body").append("div")
                    .attr("class", "tooltip")
                    .style("position", "absolute")
                    .style("z-index", "10")
                    .style("opacity", 0);
                var div = d3.select("svgclass").append("div")
                    .attr("class", "tooltip")
                    .style("opacity", 0);
                // Change the Toggle
                d3.select(".loading").style("visibility", "visible");
                var dataFile;
                var dataPath;
                var titles = ["usc35.json", "usc17.json", "usc20.json"];
                fileName = titles[1];

                // Change the Toggle
                d3.select("#otherTitle").text("dd");

                $('div.buttonBack').click(function () {
                    clickBack();
                });

                $('div.buttonHome').click(function () {
                    clickHome();
                });

                dataFile = dataPath + fileName;
                var width = 720,
                    height = 660,
                    root;
                var linkDistance = 110;
                var chargeDefault = -4500;
                var radius = masterRadius = 58;
                var centerRadius = radius + 15;
                //    var reset=true;
                var centered;
                var active = d3.select(null);
                var showLabels = true;
                var textBoxVisible = false;
                var scaleMaster = null;
                var scaleMasterBase = 1.4;
                var windowWidthIdeal = 1910;
                var windowHeightIdeal = 1080;
                var skipCount = 0;
                var skipAmount = 0;
                // Check if we're running on a mobile
                //because and skip some ticks, otherwise performance is slower
                window.mobileAndTabletcheck = function () {
                    var check = false;
                    (function (a) {
                        if (
                            /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i
                            .test(a) ||
                            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i
                            .test(a.substr(0, 4))) check = true
                    })(navigator.userAgent || navigator.vendor || window.opera);
                    return check;
                }
                var isMobile = window.mobileAndTabletcheck();
                if (isMobile) {
                    skipAmount = 2;
                } else {
                    skipAmount = 0;
                }
                // Rescale the diagram to shrink it if the window
                // is not wide enough or tall enough
                scaleRatio = 1;
                if (window.innerHeight < windowHeightIdeal) {
                    scaleRatio = window.innerHeight / windowHeightIdeal;
                } else if (window.innerWidth < windowWidthIdeal) {
                    scaleRatio = window.innerWidth / windowWidthIdeal;
                }
                // expand the SVG if the window is wide
                if (window.innerWidth > windowWidthIdeal) {
                    var textBoxSize = 300;
                    width = width + textBoxSize;
                }
                scaleMasterBase = 1.4 * scaleRatio;
                //width = width * (scaleRatio);
                //height = height * (scaleRatio);
                width = window.innerWidth - 15;
                height = window.innerHeight - 215;
                var wCenterX = height / 2;
                var wCenterY = width / 2;
                var svgContainer = d3.select(".svgContainer");
                svgContainer.append("svg")
                    .attr("class", "svgclass")
                    .attr("width", width)
                    .attr("height", height + 40);
                var force = d3.layout.force()
                    .size([width, height])
                    .linkDistance([linkDistance])
                    .charge([chargeDefault])
                    .gravity(.03)
                    .friction(.85)
                    .on("tick", function (e) {
                        tick(e);
                    });
                var svg = d3.select(".svgclass");
                var borderPath = svg.append("rect")
                    .attr("x", 0)
                    .attr("y", 0)
                    .attr("height", height)
                    .attr("width", width)
                    .style("stroke", "white")
                    .style("fill", "white")
                    .on("click", function (d) {
                        resetAll();
                    })
                    .style("stroke-width", "1");
                var g = svg.append("g")
                    .attr("class", "container");
                var link = g.selectAll(".link"),
                    node = g.selectAll(".node");
                var nodeCircle = g.selectAll(".nodeCircle");
                var gcontainer = g.selectAll("g");
                //var colors = d3.scale.category10();
                var colornr = 0;
                var colors = ["#E6311F", "#E69B1F", "#BDC40D", "#16B8EE"];
                var focusNode = null;
                //#989898 grey color

                let rMap = (obj) => {
                    // obj is a cluster
                    if (obj.name && obj.children) {
                        return {
                            num: obj.name,
                            children: obj.children.map(rMap),
                            color: colors[colornr]
                        };

                    }
                    // obj is a leaf node
                    else {
                        return {
                            num: obj.name,
                            color: "#989898"
                            //publications: obj.research_outputs.map((rMap),
                            /*children: obj.research_outputs.map((ro) => {
                                return {
                                    num: ro.title,
                                    children: []
                                }
                            })*/
                        };
                    }
                    colornr = colornr + 1;
                    if (colornr > 3) {
                        colornr = 0;
                    }
                }

                loadDataFile(rMap(items));

                function loadDataFile(file) {

                    root = file;
                    root.x0 = 0;
                    root.y0 = 0;
                    // Start off Collapsed
                    flatten(root);
                    root.children.forEach(collapse);
                    // Erase the loading sign
                    d3.select(".loading").style("visibility", "hidden");
                    update2();
                    zoomInitial(root);

                }

                function update2() {

                    //        clearNodes();

                    var nodes = flatten(root),
                        links = d3.layout.tree().links(nodes);

                    var tree1 = d3.layout.tree();
                    var links = tree1.links(nodes);

                    circlePoints(nodes);

                    // Restart the force layout.
                    force
                        .nodes(nodes)
                        .links(links)
                        .start();

                    // Update the links…
                    link = link.data(links, function (d) {
                        return d.target.id;
                    });

                    // Exit any old links.
                    link.exit().remove();

                    // Enter any new links.
                    link.enter().insert("line", ".node")
                        .attr("class", "link")
                        .attr("x1", function (d) {
                            return d.source.x;
                        })
                        .attr("y1", function (d) {
                            return d.source.y;
                        })
                        .attr("x2", function (d) {
                            return d.target.x;
                        })
                        .attr("y2", function (d) {
                            return d.target.y;
                        });

                    // Update the nodes…
                    node = node.data(nodes, function (d) {
                        1 == 1;
                        return d.id;
                    }).style("fill", color);

                    // Exit any old nodes.
                    node.exit().remove();

                    var g1 = node.enter().append("g")
                        .attr("class", "node");


                    g1.attr("transform", function (d) {

                            var x = d.x;
                            var y = d.y;

                            text = "translate (" + x + "," + y + ")";

                            return text;

                        })
                        .on('mouseover', function (d) {
                            var circle = d3.select(this).select(".nodeCircle");
                            //                        circle.style("stroke-width", "2px");
                            circle.style("stroke-width", "2px");
                            circle.style("stroke", "black");

                            tooltip.transition()
                                .duration(200)
                                .style("font-size", "25px")
                                .style("font-weight", "500")
                                .style("opacity", 0.9);

                            tooltip.html(d.num);

                        })
                        .on('mousemove', function (d) {
                            tooltip.style("top", (d3.event.pageY - 10) + "px")
                                .style("left", (d3.event.pageX + 10) + "px")
                        })
                        .on('mouseout', function (d) {
                            var circle = d3.select(this).select(".nodeCircle");
                            if (hasChildren(d)) {
                                circle.style("stroke-width", "5px");
                            } else {
                                circle.style("stroke-width", "2px");
                            }
                            circle.style("stroke", "#cccccc");

                            tooltip.transition()
                                .duration(500)
                                .style("opacity", 0);
                        })
                        .on('click', function (d) {
                            if (d.color = "#989898") {
                                l(d);
                                var publications = findPublications(d);
                                var htmlElt = [];
                                htmlElt.push("<ul class='list-group'>");
                                publications.research_outputs.forEach(elt => {
                                    htmlElt.push("<li class='list-group-item'>" + elt +
                                        "<button class='btn btn-warning align-right float-right'>details</button></li>"
                                    );
                                });
                                htmlElt.push("</ul>");
                                $('#publications').append(htmlElt);
                                $('#title').append("Publication of "+capitalizeFirstLetter(publications.name));
                                window.location.href = '#popup';

                            }
                        });

                    // Enter any new nodes.
                    g1.append("circle")
                        .attr("class", "nodeCircle")
                        .attr("cx", function (d) {
                            return 0
                        })
                        .attr("cy", function (d) {

                            return 0;
                        })
                        .attr("r", function (d) {
                            var rad = 0;
                            //                    if (d.depth==1){
                            if (d.selected) {
                                rad = centerRadius;
                                //                        d.fixed=true;
                            } else {
                                rad = radius;
                            }
                            return rad;
                        })
                        .style("stroke", function (d) {
                            if (hasChildren(d)) {
                                return "#cccccc";
                            } else {
                                return "#636363";
                            }

                        })
                        .style("stroke-width", function (d) {
                            if (hasChildren(d)) {
                                return "5px";
                            } else {
                                return "1.5px";
                            }

                        })
                        .style("fill", function (d, i) {

                            return d.color;
                            /*if (hasChildren(d)) {
                                return colors[1][1];
                                colornr++;
                                console.log(colornr);
                            } else {
                                return "#a89e92";
                            }*/
                            //colornr++;
                            /*if (colornr > 3)
                                colornr = 1;*/
                            //return "#ffe100";//colors(i);
                        })
                        .on("click", click2)

                        .call(force.drag);



                    addNames();

                    svg.selectAll(".nodeCircle")
                        .attr("r", function (d) {
                            if (d.selected == true) {
                                return centerRadius;
                            }
                            if (d.depth == 1) {
                                return centerRadius;
                            }
                            return radius;
                        });


                    var nodeList = svg.selectAll(".node");

                    nodeList.style("opacity", function (d) {
                            var opacity = d.opacity;
                            if (opacity) {
                                return opacity;
                            } else {
                                return 1;
                            }
                        }

                    );

                    link.style("opacity", function (d) {
                        var opacity = d.target.opacity;
                        if (opacity) {
                            return opacity;
                        } else {
                            return .6;
                        }
                    });


                }



                function addNames() {
                    var g2;
                    var labelshift;
                    var nameArray = [];
                    var maxLength = 15;
                    if (showLabels) {
                        labelshift = -8
                    } else {
                        labelshift = 0;
                    }
                    // Select all visible circles
                    g2 = svg.selectAll(".node");
                    // Remove the old circle text
                    d3.selectAll(".label").remove();
                    // Add the section Num to the Circle
                    /*g2.append("text")
                        .text(function (d) {
                            var num = "";
                            num = d.num;
                            if (num.slice(-1) == "—") {
                                num = num.slice(0, num.length - 1)
                            }
                            return num;
                        })
                        .attr("class", "label")
                        .classed("large", function (d) {
                            if (d.depth == 1) {
                                return true;
                            } else {
                                return false
                            }
                        })
                        .attr("y", function (d) {
                            if (showLabels) {
                                return 0 + labelshift;
                            } else {
                                return 0;
                            }
                        })
                        .on("click", click2)
                        .call(force.drag);*/
                    // Remove all of the earlier Circle Names
                    d3.selectAll(".nameText").remove();

                    // Select each node and add the descriptive Name
                    // or descriptive content below
                    g2.append("g")
                        .each(function (d) {
                            var displayText = "";
                            if (d.name) {
                                displayText = toProperCase(d.name);
                            } else if (d.num) {
                                displayText = d.num;
                            }
                            if (hasChildren(d)) {} else {
                                if (d.content) {
                                    displayText = d.content[0];
                                }
                            }
                            var n = chopText(displayText, maxLength);
                            var text1 = d3.select(this)
                                .on("click", click2)
                                .call(force.drag);
                            var maxRow = 3;
                            var line_error = 2
                            for (var i = 0; i < n.length; i++) {
                                if (i <= maxRow) {
                                    var display = n[i];
                                    if (i == maxRow) {
                                        if ((n.length - 1) > maxRow) {
                                            display = display + "...";
                                        }
                                    }
                                    text1.append("text")
                                        .attr('x', 0)
                                        .attr("y", function (d) {
                                            if (n.length == 1) {
                                                line_error = 10;
                                            } else if (n.length == 2) {
                                                line_error = 4;
                                            } else if (n.length == 3) {
                                                line_error = -5;
                                            } else {
                                                line_error = -13;
                                            }
                                            return line_error + ((i) * 18) + labelshift;
                                        })
                                        .attr("class", "nameText")
                                        .classed("large", function (d) {
                                            if (d.depth == 1) {
                                                return true;
                                            } else {
                                                return false
                                            }
                                        })
                                        .style("font-size", "90%")
                                        .style("font-weight", "500")
                                        .text(display)
                                }
                            }
                        });
                }

                function hasChildren(d) {
                    if (d.children) {
                        if (d.children.length > 0) {
                            return true;
                        }
                    }
                    if (d._children) {
                        if (d._children.length > 0) {
                            return true;
                        }
                    }
                    return false;
                }

                function getChildren(d) {
                    var children = null;
                    if (hasChildren(d)) {
                        if (d.children) {
                            if (d.children.length > 0) {
                                children = d.children;
                            }
                        }
                        if (d._children) {
                            if (d._children.length > 0) {
                                children = d._children;
                            }
                        }
                    }
                    return children;
                }

                function resetAll() {
                    reset();
                    update2();
                }

                function hasGrandChildren(d) {
                    var hasGC = false;
                    if (hasChildren(d)) {
                        var children = getChildren(d);
                        children.forEach(function (d1) {
                            if (hasChildren(d1)) {
                                hasGC = true;
                            }
                        });
                    }
                    return hasGC;
                }

                function collapse(d) {
                    if (d.children) {
                        d._children = d.children;
                        d.children = null;
                        d._children.forEach(collapse);
                    }
                }

                function collapseAllChildren(d) {
                    if (d.children) {
                        d.children.forEach(collapse);
                    }
                }

                function resetSelected(d) {
                    var children;
                    if (d.children) {
                        children = d.children
                    };
                    if (d._children) {
                        children = d._children
                    };
                    d.selected = false;
                    if (children) {
                        children.forEach(resetSelected);
                    }
                    return
                }
                // Color leaf nodes orange, and packages white or blue.
                function color(d) {
                    return d._children ? "#ffe100" : d.children ? "#ffe100" : "#ffe100";
                }
                // Returns a list of all nodes under the root.
                function flatten(root) {
                    var nodes = [],
                        i = 0;
                    var depth = 0;
                    var parent = null;

                    function recurse(node, parent) {
                        depth = depth + 1;
                        if (node.children) node.children.forEach(function (d) {
                            var parent1 = node;
                            recurse(d, parent1);
                        });
                        if (!node.id) node.id = ++i;
                        node.depth = depth;
                        node.parent = parent;
                        nodes.push(node);
                        depth = depth - 1;
                    }
                    recurse(root, parent);
                    return nodes;
                }

                function click2(d) {
                    if (!textBoxVisible) {
                        toggleTextBox();
                    }
                    if (d == root) {
                        resetAll();
                        return;
                    }
                    if (d.focus) {
                        //                updateTextBox(d.parent);
                        expandCircle(d.parent);
                        // Restore the force
                    } else
                    // If we're selecting the node to open it
                    {
                        expandCircle(d);
                    }
                }

                function expandCircle(d) {
                    if (focusNode) {
                        if (focusNode != d) {
                            focusNode.selected = false;
                            focusNode.focus = false;
                            //                if (focusNode.children){
                            //                    focusNode._children =focusNode.children;
                            //                    focusNode.children=null;
                            //                }
                        }
                    }
                    focusNode = d;
                    d.selected = true;
                    d.focus = true;
                    d.children = getChildren(d)
                    d._children = null;
                    collapseAllChildren(d);
                    d.fixed = true;
                    fadeOthers(root, 0.1);
                    fadeOthers(d, 1);
                    if (d.parent) {
                        d.parent.opacity = 1;
                        d.parent.fixed = true;
                        d.parent.focus = false;
                        fixChildren(d.parent, true);
                    }
                    // Rescale the graph if there are lots
                    // of children
                    var childLength = 0;
                    if (hasChildren(d)) {
                        childLength = d.children.length;
                    }
                    //        var shrink = Math.floor(childLength/4);
                    //            var scale = (1.1- (shrink) *.04);
                    var scale = computeScale(scaleMasterBase, childLength, 5, .11);
                    // Center the new graph
                    centerIt2(d, scale);
                    // Set the force of the non selected
                    // Nodes to zero so the circles
                    //spread around the center node
                    //
                    force.charge(function (d1, i) {
                        if (d1.parent == d) {
                            d1.charge = -4500;
                        } else {
                            d1.charge = 0;
                        }
                        return d1.charge;
                    });
                    force.start();
                    updateTextBox(d);
                    fixChildren(d, false);
                    update2();
                    //        fixChildren(d.parent, false);
                    ;
                }

                function fadeOthers(d, opacity) {
                    var children = getChildren(d);
                    d.opacity = opacity;
                    if (children) {
                        children.forEach(function (d) {
                            var child = d;
                            fadeOthers(child, opacity)
                            //                    fadeOthers(d,opacity))
                        })
                    }
                    return;
                }

                function resetFixed(d) {
                    var children;
                    if (d.children) {
                        children = d.children
                    } else {
                        children = d._children;
                    }
                    d.fixed = false;
                    if (children) {
                        children.forEach(function (d) {
                            var child = d;
                            resetFixed(child)
                            //                    fadeOthers(d,opacity))
                        })
                    }
                    return;
                }

                function centerIt2(d, scale1) {
                    var oldX = d.px;
                    var oldY = d.py;
                    var x1 = d.x;
                    var y1 = d.y;
                    if (scale1) {
                        scale = scale1;
                    } else {
                        scale = 1;
                    }
                    var centerX2 = (width / 2) - scale * (oldX);
                    var centerY2 = (height / 2) - scale * (oldY);
                    //        var centerX2 = (width/2);
                    //        var centerY2 = (height/2);
                    var newX1 = centerX2 / scale;
                    var newY1 = centerY2 / scale;
                    wCenterX = newX1;
                    wCenterY = newY1;
                    //        scale = scale * Math.max(d.x/width, d.y/height);
                    var transString = "scale(" + scale + ") " +
                        "translate(" + newX1 + "," + newY1 + ")" +
                        " translate(0,0)";
                    g.transition()
                        .duration(750)
                        .attr("transform", transString);
                    //        rescale(1, centerX2, centerY2);
                }

                function centerIt(d) {
                    var oldX = d.px;
                    var oldY = d.py;
                    var x1 = d.x;
                    var y1 = d.y;
                    //        scale = .7 / Math.max(d.x / width, d.y / height);
                    scale = 1 * Math.max(d.x / width, d.y / height)
                    //        var translate = [width / 2 - scale * oldX, height / 2 - scale * oldY];
                    var translate = [width / 2 - oldX, height / 2 - oldY]
                    svg.transition().
                    duration(750)
                        .call(zoom.translate(translate).event);
                    //        svg.transition().
                    //                duration(750)
                    //                .call(zoom.translate(translate).
                    //                        scale(scale).event);
                    //
                }
                // This is an initial animation to zoom into the circle
                function zoomInitial(d) {
                    rescale(.15);
                    //        centerIt2(d,.15);
                    var container = d3.select(".container");
                    var children = getChildren(d);
                    var numChildren = children.length;
                    scaleMaster = computeScale(scaleMasterBase, numChildren, 4, .1);
                    //        centerIt2(d,1.4);
                    rescale(scaleMaster, true);
                    return;
                }
                var zoom = d3.behavior.zoom()
                    .translate([0, 0])
                    .scale(1)
                    .scaleExtent([1, 1])
                    .on("zoom", zoomed);

                function zoomed() {
                    //        g.style("stroke-width", 1.5 / d3.event.scale + "px");
                    g.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
                }

                function reset() {
                    active.classed("active", false);
                    active = d3.select(null);
                    force.charge(chargeDefault);
                    rescale(scaleMaster, true);
                    fadeOthers(root, 1);
                    resetFixed(root);
                    root.children.forEach(collapse);
                    resetSelected(root);
                    resetCircleSet(root);
                    if (focusNode) {
                        if (focusNode != root) {
                            focusNode.selected = false;
                            focusNode.focus = false;
                            focusNode = root;
                        }
                    }
                    root.selected = true;
                }

                function clearNodes() {
                    nodes = {};
                    links = [];
                    //        force.start();
                    //        d3.timer(force.resume);
                }

                function tick(e) {
                    skipCount++;
                    if (skipCount % skipAmount == 0) {
                        return;
                    }
                    var a = e;
                    1 == 1;
                    link.attr("x1", function (d) {
                            return d.source.x;
                        })
                        .attr("y1", function (d) {
                            return d.source.y;
                        })
                        .attr("x2", function (d) {
                            return d.target.x;
                        })
                        .attr("y2", function (d) {
                            return d.target.y;
                        });
                    node
                        .attr("transform", function (d) {
                            var x = d.x;
                            var y = d.y;
                            if (d.depth == 1) {
                                var damper = .3;
                                d.x = d.x + ((width / 2) - d.x) * (damper + .02) * e.alpha;
                                d.y = d.y + ((height / 2) - d.y) * (damper + .02) * e.alpha;
                            }
                            text = "translate (" + x + "," + y + ")";
                            return text
                        });
                }

                function toProperCase(text) {
                    return text.replace(/\w\S*/g, function (txt) {
                        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                    })
                }

                function toggleTextBox() {
                    var box = d3.select("#textBox");
                    var xpos = box.style("right");
                    if (xpos == "-380px") {
                        box
                            .transition()
                            .duration(100)
                            .style("right", "0px");
                        textBoxVisible = true;
                    } else {
                        box
                            .transition()
                            .duration(100)
                            .style("right", "-380px");
                        textBoxVisible = false;
                    }
                }

                function updateTextBox(d) {
                    // Update the Header of the Text
                    fillHeaderName(d);
                    var a = d3.selectAll(".separator")
                        .style("background",
                            "lightgrey");
                    fillContent(d);
                    // Make content text slowly fade in
                    var content = d3.selectAll(".content");
                    content.style("opacity", .1);
                    content.transition()
                        .duration(200)
                        .style("opacity", 1);
                }

                function fillHeaderName(d) {
                    var parentName = "";
                    var name = "";
                    var num = "";
                    var parentNums;
                    var spacer = "";
                    var nameLower = "";
                    parentNums = getParentNum2(d);
                    if (d.num) {
                        num = d.num;
                        spacer = " - ";
                    }
                    if (d.name) {
                        name = d.name;
                        name = toProperCase(name);
                    }
                    if (name.length <= 2) {
                        parentName = getParentName(d);
                        parentName = toProperCase(parentName);
                        name = parentName + spacer + num.toLowerCase();
                    }
                    var headerBar = d3.select("body").select("#heading1");
                    //        var parentNumsLower= toProperCase(parentNums);
                    headerBar.text(parentNums);
                    var headerBar2 = d3.select("body").select("#heading2");
                    headerBar2.text(name);
                    headerBar.style("opacity", .4);
                    headerBar.transition()
                        .duration(800)
                        .style("opacity", 1);
                    headerBar2.style("opacity", .4);
                    headerBar2.transition()
                        .duration(800)
                        .style("opacity", 1);
                }

                function fillContent(d) {
                    var num, spacer = "",
                        div2;
                    var children = null;
                    if (hasChildren(d)) {
                        children = getChildren(d);
                    }
                    var contentBox =
                        d3.select("#content");
                    // Remove old content.
                    // if any is there
                    var content = d3.selectAll(".content");
                    content.remove();
                    var contentDiv = d3.selectAll(".contentDiv");
                    contentDiv.remove();
                    if (!children) {
                        if (d.content) {
                            var div2 = getContentDiv(d);
                            if (div2) {
                                contentBox
                                    .append(function (d) {
                                        return div2.node();
                                    });
                            }
                        }
                    } else {
                        var hasGC = hasGrandChildren(d);
                        if (!hasGC) {
                            children.forEach(function (d) {
                                var div2 = getContentDiv(d);
                                if (div2) {
                                    contentBox
                                        .append(function (d) {
                                            return div2.node();
                                        });
                                    d3.selectAll(".contentDiv")
                                        .classed("border1", true);
                                }
                            });
                        }
                    }
                }
                // Fills a div with the content
                // and returns the div
                function getContentDiv(d) {
                    var num, spacer = "",
                        div1;
                    if (d.num) {
                        num = d.num;
                        spacer = " - ";
                    }
                    if (d.content) {
                        div1 =
                            d3.select("body")
                            .append("div")
                            .attr("class", "contentDiv");
                        var content = d.content;
                        for (var i = 0; i < content.length; i++) {
                            var text = "";
                            text = content[i];
                            var div2 = div1
                                .append("div")
                                .classed("content", true);
                            if (i == 0) {
                                div2.append("span")
                                    .classed("contentSpan", true)
                                    .classed("headerBold", true)
                                    .text(num + " ");
                                //                    text = num + " " + content[i];
                            } else {
                                text = content[i];
                            }
                            div2
                                .append("span")
                                .classed("contentSpan", true)
                                .text(text);
                        }
                        //            div1.remove();
                        return div1;
                    }
                }

                function getParentName(d) {
                    if (a = d.parent) {
                        if (a.name) {
                            return a.name;
                        }
                    } else {
                        return "";
                    }
                }

                function getParentNum2(d) {
                    var node1 = d;
                    var numArray = []
                    numString = ""
                    while (node1.parent) {
                        text2 = node1.num;
                        if (text2) {
                            numArray.push(text2);
                        }
                        node1 = node1.parent;
                    }
                    for (var i = numArray.length - 1; i >= 0; i--) {
                        numString = numString + numArray[i]
                    }
                    return numString
                }

                function toProperCase(text) {
                    if (text) {
                        return text.replace(/\w\S*/g, function (txt) {
                            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                        })
                    } else {
                        return "";
                    }
                }

                function rescale(scale, animate, centerX, centerY) {
                    var halfw = width / 2;
                    var halfh = height / 2;
                    var newX, newY;
                    if (centerX) {
                        newX = centerX;
                    } else {
                        newX = halfw / scale;
                    }
                    if (centerY) {
                        newY = centerY;
                    } else {
                        newY = halfh / scale;
                    }
                    var newX1 = -newX * (scale - 1);
                    var newY1 = -newY * (scale - 1);
                    var container = d3.select(".container");
                    var transString = "scale(" + scale + ") " + "translate(" + newX1 + "," + newY1 + ")";
                    if (animate) {
                        container.transition()
                            .duration(750)
                            .attr("transform", transString);
                    } else {
                        container
                            .attr("transform", transString);
                    }
                }

                function circlePoints(nodes) {
                    var pi = Math.PI;
                    var points = 0;
                    var centerX = width / 2,
                        centerY = height / 2;
                    var radius1 = linkDistance;
                    var angle;
                    //        console.log("section" +String(section));
                    for (a = 0; a < nodes.length; a++) {
                        var node = nodes[a];
                        if (node.circleSet) {} else {
                            points = points + 1;
                        }
                    }
                    var section = pi / points;
                    for (i = 0; i < nodes.length; i++) {
                        var node = nodes[i];
                        if (node.circleSet) {} else {
                            //            console.log(section*(i+1));
                            angle = section * (i + 1);
                            var newX = centerX + radius1 * Math.cos(angle);
                            var newY = centerY + radius1 * Math.sin(angle);
                            node.x = newX;
                            node.y = newY;
                            node.px = newX;
                            node.py = newY;
                            node.circleSet = true;
                        }
                        //            console.log ("X: " + String(newX) + " Y: " + String(newY));
                    }
                }

                function resetCircleSet(node1) {
                    node1.children.forEach(function (d) {
                        d.circleSet = false;
                        //                    d.x=0;
                        //                    d.y=0;
                        //                    d.px=0;
                        //                    d.py=0;
                    })
                }

                function getUrlParameter(sParam) {
                    var sPageURL = window.location.search.substring(1);
                    var sURLVariables = sPageURL.split('&');
                    for (var i = 0; i < sURLVariables.length; i++) {
                        var sParameterName = sURLVariables[i].split('=');
                        if (sParameterName[0] == sParam) {
                            return sParameterName[1];
                        }
                    }
                }

                function fixChildren(d, fix) {
                    if (hasChildren(d)) {
                        var children = getChildren(d);
                        children.forEach(function (d1) {
                            d1.fixed = fix;
                        });
                    }
                }

                function fadedChildren(d, opacity) {
                    d.opacity = opacity;
                    if (hasChildren(d)) {
                        var children = getChildren(d);
                        children.forEach(function (d1) {
                            d1.opacity = opacity;
                        });
                    }
                }
                // Will shrink or enlare the scale based upon
                // Number of childrenshowing
                function computeScale(initialScale, numChildren, childrenMax, scaleStep) {
                    var scale1 = 1;
                    var shrink = Math.floor(numChildren / childrenMax);
                    var scale = (initialScale - (shrink) * scaleStep);
                    return scale;
                }
                // Takes a long sentences and chops it up
                // into arrays of smaller chunks no longer than Maxlen
                // This is for the circle display in which we have to show
                // the text on multiple chopped up lines
                function chopText(text, maxLen) {
                    var str = [];
                    var res = text.split(" ");
                    var text2 = "";
                    var text3 = "";
                    var len;
                    var text = "";
                    for (var i = 0; i < res.length - 1; i++) {
                        //            text = res[i];
                        //
                        //            len = str.push(res[i] + " ");
                        ////
                        //            var text = str[len-1];
                        text = text + " " + res[i];
                        text3 = text + " " + res[i + 1];
                        //            text2 = text + " " + res[i+1]
                        if (text3.length > maxLen) {
                            str.push(text);
                            text = "";
                        } else {}
                    }
                    if (text.length > 0) {
                        str.push(text + " " + res[res.length - 1]);
                    } else {
                        str.push(res[res.length - 1]);
                    }
                    return str;
                }

                function loadTitle() {
                    var url = window.location.href;
                    var quest = url.indexOf('?');
                    if (quest > -1) {
                        url = url.substr(0, quest);
                        url = url + '?title=' + otherTitle;
                    } else {
                        url = url + '?title=' + otherTitle;
                    }
                    window.location.href = url;
                }

                function clickHome() {
                    resetAll();
                }

                function clickBack() {
                    if (focusNode) {
                        click2(focusNode.parent);
                    }
                }

                function toggleNoteBox() {
                    var noteText = d3.select("#noteContainer")
                    var opacity = noteText.style("opacity");
                    if (opacity == "0") {
                        noteText.transition()
                            .duration(400)
                            .style("visibility", "visible")
                            .style("opacity", "1")
                            .style("width", "600px")
                            .style("height", "400px")
                            .style("background", "lightgrey")
                            .style("z-index", "100");
                    } else {
                        noteText.transition()
                            .duration(400)
                            .style("visibility", "invisible")
                            .style("opacity", "0")
                            .style("width", "1px")
                            .style("height", "1px")
                            .style("background", "lightgrey");
                    }
                    //        noteText.attr("class","noteContainerOpen");
                    //
                }

                function toggleTop() {
                    var topContainer = d3.select(".topContainer");
                    var tc = topContainer[0][0];
                    if (!tc) {
                        var bodyContainer = d3.select(".bodyContainer");
                        d3.select(".mainContainer").append(function (d) {
                            return top.node();
                        });
                        var topContainer = d3.select(".topContainer");
                        topContainer.transition()
                            .duration(750)
                            .style("opacity", 1)
                            .style("visibility", "visible");
                    } else {
                        var topContainer = d3.select(".header1");
                        topContainer.transition()
                            .duration(700)
                            .style("top", "-70px")
                            .style("height", "0px");
                        //                    .style("opacity", 0)
                        //                    .remove();
                        d3.select(".topContainer")
                            .transition()
                            .duration(700)
                            .style("height", "0")
                            .style("opacity", "0")
                            .remove();
                        d3.select(".collapseTitle").remove();
                        //            topContainer.style("visiblity","hidden");
                        //            top = d3.select(".topContainer").remove();
                    }
                }
            }
        </script>

        <div class="popup" id="popup">
            <a href="#section-tours" class="popup__close">&times;</a>
            <div class="popup__content">
                <div class="popup__scrollcontent">
                    <div class="popup__top">
                        <h3 class="heading-tertiary u-margin-bottom-small" id="title"></h3>
                        <p class="popup__text">
                        </p>
                    </div>
                    <div class="popup__center" id="publications">
                    </div>
                </div>
            </div>
        </div>
</body>